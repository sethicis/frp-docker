name: Deploy New Docker Image Tags

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 1/3 *'

env:
  CACHE_KEY: docker-release-client-${{ github.run_id }}

jobs:
  check-for-latest:
    runs-on: ubuntu-latest
    outputs:
      newVersion: ${{ steps.new-version.outputs.LATEST_VERSION }}
      hasNewVersion: ${{ steps.new-version.outputs.LATEST_VERSION != steps.current-version.outputs.CURRENT_VERSION }}
    steps:
    - uses: actions/checkout@v3
    - name: Get new version number
      id: new-version
      run: echo "LATEST_VERSION=$(./get_latest_release_version.sh)" | tee -a $GITHUB_OUTPUT
    - name: Get current version
      id: current-version
      run: echo "CURRENT_VERSION=$(cat Dockerfile | sed -n -E 's/.*frp_version=([0-9.-]+)/\1/p')" | tee -a $GITHUB_OUTPUT
  update:
    needs: check-for-latest
    if: ${{ needs.check-for-latest.outputs.hasNewVersion }}
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3
    - name: Update Dockerfile
      run: make release
    - name: Cache changes for testing
      uses: actions/cache@v3
      with:
        path: ./*
        key: ${{ env.CACHE_KEY }}
  validate-build:
    needs: [update]
    uses: ./.github/workflows/test.yml
    with:
      cache-key: ${{ env.CACHE_KEY }}
    secrets:
      DOCKER_HUB_ACCESS: ${{ secrets.DOCKER_HUB_ACCESS }}
  commit-changes:
    needs: [validate-build, update]
    runs-on: ubuntu-latest
    steps:
    - name: Cache changes for testing
      uses: actions/cache@v3
      with:
        path: ./*
        key: ${{ env.CACHE_KEY }}
    - name: Git Auto Commit
      if: ${{ success()  }}
      uses: stefanzweifel/git-auto-commit-action@v4.16.0
      with:
        commit_message: 'Latest'
  deploy:
    needs: [check-for-latest, update, validate-build, commit-changes]
    if: ${{ needs.check-for-latest.outputs.hasNewVersion }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Push New Tags
        run: |
          docker push sethicis/frp-docker:latest
          docker push sethicis/frp-docker:${{ needs.check-for-latest.outputs.newVersion }}
